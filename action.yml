name: 'Conda deployment with new tag'
description: 'Automatic conda package compilation and publication in the specified Anaconda channel.'
author: "Diego Prada"
branding:
  icon: "package"
  color: "orange"
inputs:
 branch:
    description: Name of the branch to be compiled as conda package.
    required: false
    default: 'main'
 meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
 platform_all:
    description: Target all supported platforms.
    required: false
    default: false
 platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
 platform_arm-64:
    description: Target platform arm-64.
    required: false
    default: false
 platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
 platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
 platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
 platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
 platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
 platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
 platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
 platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
 platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
 upload:
    description: The package will be uploaded and published.
    required: false
    default: true
 user:
    description: Name of the Anaconda user or channel where the conda package will be published.
    required: true
 label:
    description: Label of conda package published.
    required: false
    default: 'main'
 token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
 
runs:
  using: "composite"
  steps:
    - name: setting the committer name and email
      id: committer
      shell: bash
      run: |
        author_name="$(git show --format=%an -s)"
        author_email="$(git show --format=%ae -s)"
        echo "::group::Set committer"
        echo "git config user.name $author_name"
        git config user.name $author_name
        echo "git config user.email $author_email"
        git config user.email $author_email
        echo "::endgroup::"
    - name: Moving to branch to be compiled as conda package and deploy
      id: to-branch-to-be-compiled
      shell: bash
      run: |
        git checkout ${{ inputs.branch }}
    - name: Checking if meta.yaml is in meta_yaml_dir
      id: checking-meta_yaml
      shell: bash -l {0}
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Checking if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.meta_yaml_dir }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.meta_yaml_dir }}."
        fi
        echo "::endgroup::"
    - name: Packages compilation
      id: packages-compilation
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Conda packages compilation"
        out_dir=$(mktemp -d -t compilation-XXXXXXXXXX --tmpdir=.)
        conda build . --no-anaconda-upload --output $out_dir
        echo "Package to platform linux-64 compiled"
        if "${{ inputs.platform_all }}"; then
          echo "::set-env name=platform_osx-64::inputs value true"
          echo "::set-env name=platform_osx-arm64::inputs value true"
          echo "::set-env name=platform_linux-32::inputs value true"
          echo "::set-env name=platform_linux-ppc64::inputs value true"
          echo "::set-env name=platform_linux-ppc64le::inputs value true"
          echo "::set-env name=platform_linux-s390x::inputs value true"
          echo "::set-env name=platform_linux-armv6l::inputs value true"
          echo "::set-env name=platform_linux-armv7l::inputs value true"
          echo "::set-env name=platform_linux-aarch64::inputs value true"
          echo "::set-env name=platform_linux-win-32::inputs value true"
          echo "::set-env name=platform_linux-win-64::inputs value true"
        fi
        if "${{ inputs.platform_osx-64 }}"; then
          conda convert -p osx-64 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform osx-64 compiled"
        fi
        if "${{ inputs.platform_osx-arm64 }}"; then
          conda convert -p osx-arm64 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform osx-arm64 compiled"
        fi
        if "${{ inputs.platform_linux-32 }}"; then
          conda convert -p linux-32 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-32 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64 }}"; then
          conda convert -p linux-ppc64 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-ppc64 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64le }}"; then
          conda convert -p linux-ppc64le $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-ppc64le compiled"
        fi
        if "${{ inputs.platform_linux-s390x }}"; then
          conda convert -p linux-s390x $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-s390x compiled"
        fi
        if "${{ inputs.platform_linux-armv6l }}"; then
          conda convert -p linux-armv6l $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-armv6l compiled"
        fi
        if "${{ inputs.platform_linux-armv7l }}"; then
          conda convert -p linux-armv7l $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-armv7l compiled"
        fi
        if "${{ inputs.platform_linux-aarch64 }}"; then
          conda convert -p linux-aarch64 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform linux-aarch64 compiled"
        fi
        if "${{ inputs.platform_win-32 }}"; then
          conda convert -p win-32 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform win-32 compiled"
        fi
        if "${{ inputs.platform_win-64 }}"; then
          conda convert -p win-64 $out_dir/linux-64/*.tar.bz2 --output $out_dir
          echo "Package to platform win-64 compiled"
        fi
        echo "::set-output name=out_dir::$out_dir"
        echo "::endgroup::"
    - name: Packages uploading
      id: packages-uploading
      working-directory: ./${{ inputs.meta_yaml_dir }}/${{ packages-compilation.out_dir }}
      run: |
        echo "::group::Conda packages uploading"
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        for dirname in *; do
          if [ -d "$dirname" ]; then
            if "${{ inputs.replace }}"; then
               anaconda upload --user ${{ inputs.user }} --force --label ${{ inputs.label }} $dirname/*.tar.bz2
            else
               anaconda upload --user ${{ inputs.user }} --label ${{ inputs.label }} $dirname/*.tar.bz2
            fi
          fi
        done
        echo "::endgroup::"
