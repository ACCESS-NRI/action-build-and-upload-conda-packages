name: 'Build and upload conda packages'
description: 'Automatic conda package compilation and publication in the speficied Anaconda user or organization.'
author: "Diego Prada-Gracia"
branding:
  icon: "package"
  color: "orange"
inputs:
  meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  python-version:
    description: Python version of the package to be built.
    required: true
  mambabuild:
    description: Using boa (mambabuild) to build the packages.
    required: false
    default: false
  platform_host:
    description: Target host plaform.
    required: false
    default: true
  platform_all:
    description: Target all supported platforms.
    required: false
    default: false
  platform_linux-64:
    description: Target platform linux-64.
    required: false
    default: false
  platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
  platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
  platform_osx-arm64:
    description: Target platform osx-arm64.
    required: false
    default: false
  platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
  platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
  platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
  platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
  platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
  platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
  platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
  platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
  upload:
    description: Upload built package to anaconda
    required: false
    default: true
  overwrite:
    description: Do not cancel the uploading if a package with the same name is found already in Anaconda.
    required: false
    default: false
  user:
    description: Name of the Anaconda user or organization where the conda package will be published.
    required: false
    default: ''
  label:
    description: Label of the published conda package.
    required: false
    default: main
  token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
  conda_build_args:
    description: Optional arguments to pass to the 'conda build' command.
    required: false
    default: ''
  conda_convert_args:
    description: Optional arguments to pass to the 'conda convert' command.
    required: false
    default: ''
  anaconda_upload_args:
    description: Optional arguments to pass to the 'anaconda upload' command.
    required: false
    default: ''
outputs:
  paths:
    description: Paths for the built packages, in the format 'path1 path2 ... pathN'.
    value: ${{steps.packages-uploading.outputs.paths}}

runs:
  using: "composite"
  steps:
    - name: Sanity checks on inputs
      shell: bash
      run: |
        echo "::group::Sanity checks on inputs"
        if [ "${{ inputs.upload }}" == "true" ]; then
          if [ "${{ inputs.token }}" == "" ]; then
            echo -e "An Anaconda token is required when the package is to be uploaded.\n"\
                    "Please specify a 'token', or set 'upload' to 'false'."
            exit 1
          if [ "${{ inputs.user }}" == "" ]; then
            echo -e "An Anaconda user or organization is required when the package is to be uploaded.\n"\
                    "Please specify a 'user', or set 'upload' to 'false'."
            exit 1
          fi
        fi
        echo "::endgroup::"
    - name: Event trigger data
      shell: bash
      run: |
        echo "::group::Information about the trigger event"
        echo "Trigger event: $GITHUB_EVENT_NAME"
        echo "Associated commit SHA: $GITHUB_SHA"
        echo "::endgroup::"
    - name: Checking if meta.yaml is in meta_yaml_dir
      id: checking-meta_yaml
      shell: bash
      working-directory: ${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Checking if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.meta_yaml_dir }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.meta_yaml_dir }}."
        fi
        echo "::endgroup::"
    - name: Packages compilation
      id: packages-compilation
      shell: bash -l {0}
      working-directory: ${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Building conda package for host platform"
        out_dir=`mktemp -d -t compilation-XXXXXXXXXX`
        echo "out_dir=$out_dir" >> $GITHUB_OUTPUT
        if "${{ inputs.mambabuild }}"; then
          build_function="mambabuild"
        else
          build_function="build"
        fi
        build_command="conda $build_function . --no-anaconda-upload --output-folder $out_dir --python ${{ inputs.python-version }} ${ inputs.conda_build_args }"
        echo "$build_command"
        eval "$build_command"
        HOST_PACKAGE=$(eval "$build_command --output")
        echo "Package for host platform compiled as $HOST_PACKAGE"
        du -sh $HOST_PACKAGE
        echo "::endgroup::"
        echo "::group::Converting package for other platforms"
        conda_convert_command="conda convert $HOST_PACKAGE -o $out_dir ${ inputs.conda_convert_args }"
        if "${{ inputs.platform_all }}"; then
          platforms_options+=" -p all"
        fi
        if "${{ inputs.platform_linux-64 }}"; then
          platforms_options+=" -p linux-64"
        fi
        if "${{ inputs.platform_linux-32 }}"; then
          platforms_options+=" -p linux-32"
        fi
        if "${{ inputs.platform_osx-64 }}"; then
          platforms_options+=" -p osx-64"
        fi
        if "${{ inputs.platform_osx-arm64 }}"; then
          platforms_options+=" -p osx-arm64"
        fi
        if "${{ inputs.platform_linux-ppc64 }}"; then
          platforms_options+=" -p linux-ppc64"
        fi
        if "${{ inputs.platform_linux-ppc64le }}"; then
          platforms_options+=" -p linux-ppc64le"
        fi
        if "${{ inputs.platform_linux-s390x }}"; then
          platforms_options+=" -p linux-s390x"
        fi
        if "${{ inputs.platform_linux-armv6l }}"; then
          platforms_options+=" -p linux-armv6l"
        fi
        if "${{ inputs.platform_linux-armv7l }}"; then
          platforms_options+=" -p linux-armv7l"
        fi
        if "${{ inputs.platform_linux-aarch64 }}"; then
          platforms_options+=" -p linux-aarch64"
        fi
        if "${{ inputs.platform_win-32 }}"; then
          platforms_options+=" -p win-32"
        fi
        if "${{ inputs.platform_win-64 }}"; then
          platforms_options+=" -p win-64"
        fi
        if [ -n "$platforms_options" ]; then
            echo "${conda_convert_command}${platforms_options}"
            eval "${conda_convert_command}${platforms_options}"
        fi
        if ! "${{ inputs.platform_host }}"; then
          rm $HOST_PACKAGE
          echo "Package for host platform removed."
        fi
        echo "::endgroup::"
    - name: Packages uploading
      id: packages-uploading
      if: inputs.upload == 'true'
      shell: bash -l {0}
      working-directory: ${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Conda packages uploading"
        label=${{ inputs.label }}
        force=""
        if "${{ inputs.overwrite }}"; then
          force="--force"
        fi
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        SHORT_SHA="$(git rev-parse --short $GITHUB_SHA)"
        package_paths=$(find ${{ steps.packages-compilation.outputs.out_dir }} -type f -name $(basename $HOST_PACKAGE))
        for package_path in $package_paths; do
          command="anaconda upload --user ${{ inputs.user }} $force --label $label ${{ inputs.anaconda_upload_args }} $package_path"
          echo "$command"
          eval "$command"
          paths+=($package_path)
        done
        echo "paths=${paths[@]}" >> $GITHUB_OUTPUT 
        echo "::endgroup::"

