name: 'Build and upload conda packages'
description: 'Automatic conda package compilation and publication in the speficied Anaconda user or organization.'
author: "Diego Prada-Gracia"
branding:
  icon: "package"
  color: "orange"
inputs:
  meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  platform_all:
    description: Target all supported platforms.
    required: false
    default: false
  platform_linux-64:
    description: Target platform linux-64.
    required: false
    default: false
  platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
  platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
  platform_osx-arm64:
    description: Target platform osx-arm64.
    required: false
    default: false
  platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
  platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
  platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
  platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
  platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
  platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
  platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
  platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
  upload:
    description: Upload built package to anaconda
    required: false
    default: true
  user:
    description: Name of the Anaconda user or organization where the conda package will be published.
    required: false
    default: ''
  label:
    description: Label of the published conda package.
    required: false
    default: ''
  token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
  conda_build_args:
    description: Optional arguments to pass to the 'conda build' command.
    required: false
    default: ''
  conda_convert_args:
    description: Optional arguments to pass to the 'conda convert' command.
    required: false
    default: ''
  anaconda_upload_args:
    description: Optional arguments to pass to the 'anaconda upload' command.
    required: false
    default: ''
outputs:
  paths:
    description: Paths for the built packages, in the format 'path1 path2 ... pathN'.
    value: ${{steps.set-output-paths.outputs.paths}}

runs:
  using: "composite"
  steps:
    - name: Sanity checks on inputs
      shell: bash -l {0}
      run: |
        echo "::group::Sanity checks on inputs"
        if [ "${{ inputs.upload }}" == "true" ]; then
          if [ -z "${{ inputs.token }}" ]; then
            echo -e "An Anaconda token is required when the package is to be uploaded.\n"\
                    "Please specify a 'token', or set 'upload' to 'false'."
            exit 1
          fi
          if [ -z "${{ inputs.user }}" ]; then
            echo -e "An Anaconda user or organization is required when the package is to be uploaded.\n"\
                    "Please specify a 'user', or set 'upload' to 'false'."
            exit 1
          fi
        fi
        if ${{ contains(inputs.conda_build_args, '--no-anaconda-upload') }}; then
            echo -e "The argument '--no-anaconda-upload' is already used within this action's 'conda build' command and is not allowed in 'conda_build_args'."
            exit 1
        fi
        if ${{ contains(inputs.conda_build_args, '--output-folder') }}; then
            echo -e "The destination folder for the built packages is set internally and the '--output-folder' option is not allowed in 'conda_build_args'.\n"
                "To retrieve the paths of the built packages, please refer to this action's 'paths' output."
            exit 1
        fi
        if ${{ contains(inputs.conda_convert_args, '--output-folder') }}; then
            echo -e "The destination folder for the converted packages is set internally and the '--output-folder' option is not allowed in 'conda_convert_args'.\n"
                "To retrieve the paths of the built packages, please refer to this action's 'paths' output."
            exit 1
        fi
        if (${{ contains(inputs.anaconda_upload_args, '--label') }} || ${{ contains(inputs.anaconda_upload_args, '-l') }}) && [ -n "${{ inputs.label }}" ]; then
            echo -e "Both the 'label' input and the '--label'/'-l' option within 'anaconda_upload_args' were specified.\n"\
                "Please only use one of them."
            exit 1
        fi
        if (${{ contains(inputs.anaconda_upload_args, '--user') }} || ${{ contains(inputs.anaconda_upload_args, '-u') }}) && [ -n "${{ inputs.user }}" ]; then
            echo -e "Both the 'user' input and the '--user'/'-u' option within 'anaconda_upload_args' were specified.\n"\
                "Please only use one of them."
            exit 1
        fi
        if ${{ contains(inputs.anaconda_upload_args, '--token') }} && [ -n "${{ inputs.token }}" ]; then
            echo -e "Both the 'token' input and the '--token' option within 'anaconda_upload_args' were specified.\n"\
                "Please only use one of them."
            exit 1
        fi
        echo "::endgroup::"
    - name: Event trigger data
      shell: bash -l {0}
      run: |
        echo "::group::Information about the trigger event"
        echo "Trigger event: $GITHUB_EVENT_NAME"
        echo "Associated commit SHA: $GITHUB_SHA"
        echo "::endgroup::"
    - name: Checking if meta.yaml is in meta_yaml_dir
      working-directory: ${{ inputs.meta_yaml_dir }}
      shell: bash -l {0}
      run: |
        echo "::group::Checking if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.meta_yaml_dir }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.meta_yaml_dir }}."
        fi
        echo "::endgroup::"
    - name: Conda build version
      id: conda-build-version
      shell: bash -l {0}
      run: |
        echo "::group::Conda build version"
        conda build --version
        echo "::endgroup::"
    - name: Packages compilation
      id: compilation
      working-directory: ${{ inputs.meta_yaml_dir }}
      shell: bash -l {0}
      run: |
        host_platform=$(conda info --json | jq -r '.platform')
        echo "::group::Building conda package for '${host_platform}' platform"
        out_dir=`mktemp -d -t compilation-XXXXXXXXXX`
        echo "out_dir=$out_dir" >> $GITHUB_OUTPUT
        conda_build_command="conda build . --no-anaconda-upload --output-folder $out_dir ${{ inputs.conda_build_args }}"
        host_packages=($(eval "$conda_build_command --output"))
        echo "Building the following packages:"
        printf "%s\n" "${host_packages[@]}"
        echo "$conda_build_command"
        eval "$conda_build_command"
        [[ "${host_packages[0]}" == *.conda ]] && is_conda_format=true || is_conda_format=false
        echo "HOST_PACKAGES=${host_packages[*]}" >> $GITHUB_ENV
        echo "IS_CONDA_FORMAT=$is_conda_format" >> $GITHUB_ENV
        if [ -z "$host_packages" ]; then
          echo "::warning:: No package was built."
        else
          echo "Successfully built following packages for host platform:"
          printf "%s\n" "${host_packages[@]}"
        fi
        echo "::endgroup::"
    - name: Transmute .conda packages to .tar.bz2
      id: transmutation
      shell: bash -l {0}
      run: |
        # conda convert does not support .conda packages yet, therefore, we need to convert them 
        # to .tar.bz2 first and then convert them back to .conda
        # More info --> https://github.com/uibcdf/action-build-and-upload-conda-packages/issues/25
        # Only perform transmutation if the package is a .conda package or conversion has been requested
        echo "::group::Transmute .conda packages to .tar.bz2"
        
        # Check if a platform conversion is required and export a GitHub environment variable
        any_platform_inputs=$(jq 'to_entries | map(select(.key | startswith("platform_")) | .value == "true") | any' <<< '${{ toJSON(inputs) }}')
        [[ ${{ contains(inputs.conda_convert_args, '-p ') }} == true || \
           ${{ contains(inputs.conda_convert_args, '--platform ') }} == true || \
           $any_platform_inputs == true \
        ]] && is_conversion_required=true || is_conversion_required=false
        echo "IS_CONVERSION_REQUIRED=$is_conversion_required" >> $GITHUB_ENV

        # Check if a package transmutation is required and export a GitHub environment variable
        [[ '${{ env.IS_CONDA_FORMAT }}' == true && $is_conversion_required == true ]] && is_transmutation_required=true || is_transmutation_required=false
        echo "IS_TRANSMUTATION_REQUIRED=$is_transmutation_required" >> $GITHUB_ENV

        # Transmute the package if needed
        if [[ $is_transmutation_required == true ]]; then
          if ! command -v cph &> /dev/null; then # if cph is not installed, install it
              echo "'conda-package-handling' is not installed. Installing it..."
              conda install anaconda::conda-package-handling
          fi
          for package in ${{ env.HOST_PACKAGES }}; do
            transmuted_name="${package%.conda}.tar.bz2"
            cph transmute "$package" .tar.bz2
            echo "Transmuted '$(basename $package)' to '$(basename $transmuted_name)'."
            host_package_transmuted+=($transmuted_name)
          done
          echo "HOST_PACKAGES_TRANSMUTED=${host_package_transmuted[*]}" >> $GITHUB_ENV
        else
          echo "No transmutation needed."
        fi
        echo "::endgroup::"
    - name: Packages conversion
      id: conversion
      working-directory: ${{ inputs.meta_yaml_dir }}
      shell: bash -l {0}
      run: |
        echo "::group::Converting package for other platforms"
        if [[ '${{ env.IS_CONVERSION_REQUIRED }}' == true ]]; then
          if "${{ inputs.platform_all }}"; then
            platforms_options+=" -p all"
          fi
          if "${{ inputs.platform_linux-64 }}"; then
            platforms_options+=" -p linux-64"
          fi
          if "${{ inputs.platform_linux-32 }}"; then
            platforms_options+=" -p linux-32"
          fi
          if "${{ inputs.platform_osx-64 }}"; then
            platforms_options+=" -p osx-64"
          fi
          if "${{ inputs.platform_osx-arm64 }}"; then
            platforms_options+=" -p osx-arm64"
          fi
          if "${{ inputs.platform_linux-ppc64 }}"; then
            platforms_options+=" -p linux-ppc64"
          fi
          if "${{ inputs.platform_linux-ppc64le }}"; then
            platforms_options+=" -p linux-ppc64le"
          fi
          if "${{ inputs.platform_linux-s390x }}"; then
            platforms_options+=" -p linux-s390x"
          fi
          if "${{ inputs.platform_linux-armv6l }}"; then
            platforms_options+=" -p linux-armv6l"
          fi
          if "${{ inputs.platform_linux-armv7l }}"; then
            platforms_options+=" -p linux-armv7l"
          fi
          if "${{ inputs.platform_linux-aarch64 }}"; then
            platforms_options+=" -p linux-aarch64"
          fi
          if "${{ inputs.platform_win-32 }}"; then
            platforms_options+=" -p win-32"
          fi
          if "${{ inputs.platform_win-64 }}"; then
            platforms_options+=" -p win-64"
          fi
          if [[ '${{ env.IS_TRANSMUTATION_REQUIRED}}' == true ]]; then
            package_files='${{ env.HOST_PACKAGES_TRANSMUTED }}'
          else
            package_files='${{ env.HOST_PACKAGES }}'
          fi
          conda_convert_command="conda convert -o ${{ steps.compilation.outputs.out_dir }} ${{ inputs.conda_convert_args }} ${platforms_options} $package_files"
          echo "${conda_convert_command}"
          eval "${conda_convert_command}"
        else
          echo "No package conversion requested."
        fi
        echo "::endgroup::"
    - name: Transmute .tar.bz2 packages back to .conda
      id: back-transmutation
      shell: bash -l {0}
      run: |
        echo "::group::Transmute packages back to '.conda' format"
        if [[ '${{ env.IS_TRANSMUTATION_REQUIRED }}' == true ]]; then
          packages=$(find ${{ steps.compilation.outputs.out_dir }} -type f -name "*.tar.bz2")
          for package in $packages; do
            cph transmute $package .conda
            echo "Transmuted '$package' to '${package%.tar.bz2}.conda'."
          done
        else
          echo "No transmutation needed."
        fi
        echo "::endgroup::"
    - name: Set output paths
      id: set-output-paths
      shell: bash -l {0}
      run: |
        echo "::group::Setting output paths"
        [[ '${{ env.IS_CONDA_FORMAT }}' == true ]] && package_extension='.conda' || package_extension='.tar.bz2'
        paths=($(find ${{ steps.compilation.outputs.out_dir }} -type f -name "*${package_extension}"))
        echo "Output paths:"
        printf "%s\n" "${paths[@]}"
        # Set multi-line output
        {
          echo 'paths<<EOF'
          printf "%s\n" "${paths[@]}"
          echo EOF
        } >> "$GITHUB_OUTPUT"
        echo "::endgroup::"
    - name: Packages upload
      id: upload
      if: inputs.upload == 'true'
      working-directory: ${{ inputs.meta_yaml_dir }}
      shell: bash -l {0}
      run: |
        echo "::group::Conda packages uploading"
        label=${{ inputs.label }}
        label=${label:-main} #If label is empty (input not provided), set it to 'main'
        export ANACONDA_API_TOKEN=${{ inputs.token }}
        while IFS= read -r package_path; do
          command="anaconda upload --user ${{ inputs.user }} --label $label ${{ inputs.anaconda_upload_args }} $package_path"
          echo "$command"
          eval "$command"
        done <<< '${{ steps.set-output-paths.outputs.paths }}'
        echo "::endgroup::"