name: 'Build and upload conda packages'
description: 'Automatic conda package compilation and publication in the Anaconda user or channel specified by the user.'
author: "Diego Prada-Gracia"
branding:
  icon: "package"
  color: "orange"
inputs:
  branch:
    description: Name of the branch to be compiled as conda package.
    required: false
    default: 'main'
  meta_yaml_dir:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  python-version:
    description: Path to the directory in the repository where the meta.yaml file is located.
    required: true
  platform_all:
    description: Target all supported platforms.
    required: false
    default: false
  platform_linux-64:
    description: Target platform linux-64.
    required: false
    default: false
  platform_linux-32:
    description: Target platform linux-32.
    required: false
    default: false
  platform_osx-64:
    description: Target platform osx-64.
    required: false
    default: false
  platform_arm-64:
    description: Target platform arm-64.
    required: false
    default: false
  platform_linux-ppc64:
    description: Target platform linux-ppc64.
    required: false
    default: false
  platform_linux-ppc64le:
    description: Target platform linux-ppc64le.
    required: false
    default: false
  platform_linux-s390x:
    description: Target platform linux-s390x.
    required: false
    default: false
  platform_linux-armv6l:
    description: Target platform linux-armv6l.
    required: false
    default: false
  platform_linux-armv7l:
    description: Target platform linux-armv7l.
    required: false
    default: false
  platform_linux-aarch64:
    description: Target platform linux-aarch64.
    required: false
    default: false
  platform_win-32:
    description: Target platform win-32.
    required: false
    default: false
  platform_win-64:
    description: Target platform win-32.
    required: false
    default: false
  overwrite:
    description: Do not cancel the uploading if a package with the same name is found already in Anaconda.
    required: false
    default: false
  user:
    description: Name of the Anaconda user or organization where the conda package will be published.
    required: true
  label:
    description: Label of conda package published.
    required: false
    default: auto
  token:
    description: Token to access to anaconda cloud.
    required: false
    default: ''
 
runs:
  using: "composite"
  steps:
    - name: Moving to branch to be compiled as conda package and deploy
      id: to-branch-to-be-compiled
      shell: bash
      run: |
        git checkout ${{ inputs.branch }}
    - name: Checking if meta.yaml is in meta_yaml_dir
      id: checking-meta_yaml
      shell: bash
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Checking if the file meta.yaml exists"
        if [ ! -f meta.yaml ]; then
           echo "A meta.yaml file with the compilation instructions of the conda package was not found in ${{ inputs.meta_yaml_dir }}."
           exit 1
        else
           echo "A meta.yaml file with the compilation instructions of the conda package was found in ${{ inputs.meta_yaml_dir }}."
        fi
        echo "::endgroup::"
    - name: Packages compilation
      id: packages-compilation
      shell: bash -l {0}
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Conda packages compilation"
        out_dir=$(mktemp -d -t compilation-XXXXXXXXXX --tmpdir=.)
        echo "conda build . --no-anaconda-upload --output-folder $out_dir"
        conda build . --no-anaconda-upload --output-folder $out_dir
        echo "Package to platform linux-64 compiled"
        if "${{ inputs.platform_all }}"; then
          echo "conda convert -p all $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p all $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform osx-64 compiled"
        fi
        if "${{ inputs.platform_osx-64 }}"; then
          echo "conda convert -p osx-64 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p osx-64 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform osx-64 compiled"
        fi
        if "${{ inputs.platform_osx-arm64 }}"; then
          echo "conda convert -p osx-arm64 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p osx-arm64 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform osx-arm64 compiled"
        fi
        if "${{ inputs.platform_linux-32 }}"; then
          echo "conda convert -p linux-32 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-32 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-32 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64 }}"; then
          echo "conda convert -p linux-ppc64 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-ppc64 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-ppc64 compiled"
        fi
        if "${{ inputs.platform_linux-ppc64le }}"; then
          echo "conda convert -p linux-ppc64le $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-ppc64le $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-ppc64le compiled"
        fi
        if "${{ inputs.platform_linux-s390x }}"; then
          echo "conda convert -p linux-s390x $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-s390x $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-s390x compiled"
        fi
        if "${{ inputs.platform_linux-armv6l }}"; then
          echo "conda convert -p linux-armv6l $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-armv6l $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-armv6l compiled"
        fi
        if "${{ inputs.platform_linux-armv7l }}"; then
          echo "conda convert -p linux-armv7l $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-armv7l $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-armv7l compiled"
        fi
        if "${{ inputs.platform_linux-aarch64 }}"; then
          echo "conda convert -p linux-aarch64 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p linux-aarch64 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform linux-aarch64 compiled"
        fi
        if "${{ inputs.platform_win-32 }}"; then
          echo "conda convert -p win-32 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p win-32 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform win-32 compiled"
        fi
        if "${{ inputs.platform_win-64 }}"; then
          echo "conda convert -p win-64 $out_dir/linux-64/*.tar.bz2 -o $out_dir"
          conda convert -p win-64 $out_dir/linux-64/*.tar.bz2 -o $out_dir
          echo "Package to platform win-64 compiled"
        fi
        if ! "${{ inputs.platform_linux-64 }}"; then
          rm -r $out_dir/linux-64
          echo "Package to platform linux-64 removed"
        fi
        echo "::set-output name=out_dir::'$out_dir'"
        echo "::endgroup::"
    - name: Packages uploading
      id: packages-uploading
      shell: bash -l {0}
      working-directory: ./${{ inputs.meta_yaml_dir }}
      run: |
        echo "::group::Conda packages uploading"
        echo $PWD, ${{ steps.packages-compilation.outputs.out_dir }}
        label=${{ inputs.label }}
        force=""
        if "${{ inputs.overwrite }}"; then
          force="--force"
        fi
        if [ "$label" == "auto" ]; then
          if [ "${{github.event.action}}" == "released" ]; then
             label="main"
          elif [ "${{github.event.action}}" == "prereleased" ]; then
             label="dev"
          else
             echo "The trigger type ${{github.event.action}} is not compatible with `label: auto`"
             exit 1
          fi
        fi
        for dirname in *; do
          if [ -d "$dirname" ]; then
            for filename in *; do
              if [ -f "$filename" ]; then
                echo $dirname/$filename
                if [ "$filename" == "*.tar.bz2" ]; then
                  echo "anaconda upload -t TOKEN --user ${{ inputs.user_channel }} $force --label $label $dirname/$filename"
                  anaconda upload -t ${{ inputs.token }} --user ${{ inputs.user }} $force --label $label $dirname/$filename
                fi
              fi
            done
          fi
        done 
        echo "::endgroup::"

