name: Release new version

on:
  push:
    tags:
      - '**'
env:
  RELEASE_TAG_REGEX: ^v[0-9]+\.[0-9]+\.[0-9]+$

jobs:
  check-release-tag:
    name: Check release tag
    runs-on: ubuntu-latest
    outputs:
      is_release_tag: ${{ steps.check-tag.outputs.is_release_tag }}
    steps:
      - name: Check tag
        id: check-tag
        run: |
          is_release_tag=true
          tag='${{ github.ref_name }}'
          if [[ ! "$tag" =~ ${{ env.RELEASE_TAG_REGEX }} ]]; then
            echo "::warning::The tag '$tag' was not recognised as a release tag (vMAJOR.MINOR.PATCH format). Therefore, no release was created."
            is_release_tag=false
          fi
          echo "is_release_tag=$is_release_tag" >> $GITHUB_OUTPUT
  
  test-action:
    needs: [check-release-tag]
    if: ${{ needs.check-release-tag.outputs.is_release_tag == 'true' }}
    uses: ./.github/workflows/test.yml
  
  version-sanity-check:
    runs-on: ubuntu-latest
    needs: [check-release-tag]
    if: ${{ needs.check-release-tag.outputs.is_release_tag == 'true' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          ref: ${{ github.ref }}

      - name: Version sanity check
        run: |
          # Don't allow smaller new versions or jumping versions in the MAJOR.MINOR.PATCH format
          old_tag_name=$(git tag --list --sort=-version:refname | grep -E '${{ env.RELEASE_TAG_REGEX }}' | sed -n '2p')
          if [ -z "$old_tag_name" ]; then
            echo "No previous version found. Skipping version sanity check."
            exit 0
          fi
          new_tag_name='${{ github.ref_name }}'
          read -r old_major old_minor old_patch <<< $(echo ${old_tag_name#v} | tr '.' ' ')
          read -r new_major new_minor new_patch <<< $(echo ${new_tag_name#v} | tr '.' ' ')
          error_msg="Version tag inconsistent!\nVersion '$new_tag_name' cannot come after version '$new_tag_name' (latest released version)."
          # Check MAJOR
          # - New major version cannot be smaller than previous 
          # - Major version can only be incremented by 1 at a time
          if (( new_major < old_major || new_major > old_major + 1 )); then
            echo -e "$error_msg"
            exit 1
          fi
          # Check MINOR
          # - New minor version cannot be smaller than previous if major version is same
          # - New minor version can only be 0 if major version is incremented
          # - New minor version can only be incremented by 1 at a time
          if (( (new_major == old_major && new_minor < old_minor) || (new_major > old_major && new_minor != 0) || (new_minor > old_minor + 1) )); then
            echo -e "$error_msg"
            exit 1
          fi
          # Check PATCH
          # - New patch version must be bigger than previous if minor version is same
          # - New patch version can only be 0 if minor version is incremented
          # - New patch version can only be incremented by 1 at a time
          if (( (new_minor == old_minor && new_patch <= old_patch) || (new_minor > old_minor && new_patch != 0) || (new_patch > old_patch + 1) )); then
            echo -e "$error_msg"
            exit 1
          fi

  create-release:
    runs-on: ubuntu-latest
    needs: [version-sanity-check, test-action]
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create Release
        uses: softprops/action-gh-release@c95fe1489396fe8a9eb87c0abf8aa5b2ef267fda #v2.2.1
        with:
          generate_release_notes: true
          make_latest: true
    
  cleanup-tag-on-failure:
    name: Cleanup tag
    needs: [check-release-tag,create-release]
    # Run this job if:
    # 1. Any of the previous jobs failed (also don't skip if any of the needed jobs is skipped)
    # 2. The workflow is cancelled
    if: ${{ ( always() && failure() ) || cancelled() }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Delete tag
        run: |
          git push origin :${{ github.ref }}
          echo "A job in the current workflow failed. Tag '${{ github.ref_name }}' was deleted."
        
